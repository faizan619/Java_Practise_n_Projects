Video 1 -  [ https://www.youtube.com/watch?v=htZbweM4fMM&list=PLsyeobzWxl7qbKoSgR5ub6jolI8-ocxCF ]
1) set up the database. in src/main/resource/application.properties

2) create all the package of controller, model, service, repo

3) set up modal with column [ int -> primary key
                              name -> String
                              desc -> String
                              brand -> String
                              price -> int
                              category -> String
                              releaseDate -> Date
                              available -> boolean
                              quantity ->int
                              image ?
                            ]
    A] import the lombok annotation liek @data, @AllArgsConstructor and @NoargsConstructor
    B] from JPA toc create table enter annotation @Entity and mark id and @Id above it in modal
    C] Rerun the project then in browser open localhost:8080/h2-console 
    D] with the properties assign for database enter those value. 
- Done

Video 2 - [ https://www.youtube.com/watch?v=_49KFUV7TVY&list=PLsyeobzWxl7qbKoSgR5ub6jolI8-ocxCF&index=24 ]
1) Also Start with Service. 
 A] create service file. and insert @service annotation at the top of class
 B] create method as getAllproduct

2) Starting with the Controller part.. 
  A] first creating the get method to fetch all products in /api/products -GET
  B] create the object of the service and give annotation of @Autowired
  C] in the get method call the method from service ```service.getAllproduct()``` to fetch all data

3) create a interface in repo and extends that class with JPARepository and give annotation of @Repository - done
4) in productService create obj of productrepo and give annotation of @Autowired 
5) inside getAllproduct return repo.findAll();
6) for making the id autoincrement in modal product add this line above id and below @ID ``@GeneratedValue(strategy = GenerationType.IDENTITY)```
7) create a data.sql inside java/resource folder and implement the insert query!
  A] INSERT INTO product (name, desc, brand, price, category, release_date, available, quantity) VALUES
('Wireless Mouse', 'Smooth and responsive', 'LogiTech', 1299.99, 'Electronics', '2024-01-15', true, 100),
('Gaming Keyboard', 'RGB mechanical keys', 'Razer', 5999.50, 'Electronics', '2024-02-20', true, 50),
('Electric Kettle', '1.5L stainless steel', 'Prestige', 1599.00, 'Kitchen', '2024-04-10', true, 40);

8) while implementing it shows error of database not found so in  application.properties insert this line to wait for database ```spring.jpa.defer-datasource-initialization = true```

Video 3 - [ https://www.youtube.com/watch?v=iC1a8cUzGgc&list=PLsyeobzWxl7qbKoSgR5ub6jolI8-ocxCF&index=25 ]
9) while you try to fetch the data in react application it will  show CORS error. so for that 
  A] go to ProductController
  B] after @RestController and  before @RequestMapping() write this ``` @Crossorigin ``` -- [ import org.springframework.web.bind.annotation.CrossOrigin ]

Video 4 - [ https://www.youtube.com/watch?v=eznebH5QJrA&list=PLsyeobzWxl7qbKoSgR5ub6jolI8-ocxCF&index=26 ]
10) to fetch the data using Id
  A] in controller create a method to fetch id and also using pathvairable annotation as parameter capture the id.
  B] then return it with service.getProductById() along with id in parameter;
  C] in service create a method getProductById() and capture id in parameter and sent it to repo to fetch the data like ``return repo.findById(id).orElse(null);``
  D] as we are capturing the releaseDate data in database and datatime format but we want it in date so go to Product modal and above private Date releaseData write this ```@JsonFormat(shape = JsonFormat.Shape.String, pattern = "dd-MM-yyyy")``` it will change the format to dd-mm-yyyy
  E] To sent the http status code along with the data we need to change in the ProductController
  F] change the getAllproduct method of 
        ####
          public List<Product> getAllProducts(){
              return service.getAllProducts();
          } 
        ####
        to
        ####
          public ResponseEntity<List<Product>> getAllProducts(){
              return new ResponseEntity<>(service.getAllProducts(), HttpStatus.OK);
          }
        ####
        cover it with ResponseEntity and also return data with it along with other parameter of HttpStatus.ok
  G] similarly in getProductById change the controller
      ####
        public Product getProduct(@PathVariable int id){
          return service.getProductById(id);
        }
      ####
      to 
      ####
        public ResponseEntity<Product> getProduct(@PathVariable int id){
            Product product = service.getProductById(id)
            if(product != null){
                return new ResponseEntity<>(product,HttpStatus.OK);    
            }
            else{
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);    
            }
        }
      ####
      so in this we have manage .if we didn;t get any data from given id it will sent not found http req with no data. :)

Video 5 - [ https://www.youtube.com/watch?v=JIWdBBtCrjM&list=PLsyeobzWxl7qbKoSgR5ub6jolI8-ocxCF&index=27 ]
1] remove the part in modal where you are formating the date bcoz now that will be manage by the frontend
2] in modal create new variable for image

Video ? - [ https://www.youtube.com/watch?v=sjLMt7Yefng ]
1] go to Repo JPA for implementing the Search method by Brand 
2] create a method and give annotation of @Query
3] go to controller part
