@Column Attributes
--------------------------------------------------------------------------------------------------------------------------------------
| Attribute          | Type      | Description                                                                                       |
| ------------------ | --------- | ------------------------------------------------------------------------------------------------- |
| `name`             | `String`  | Specifies the name of the column in the database. If omitted, the field name is used.             |
| `unique`           | `boolean` | Whether the column should have a unique constraint. Default is `false`.                           |
| `nullable`         | `boolean` | Whether the column can contain `NULL` values. Default is `true`.                                  |
| `insertable`       | `boolean` | Whether the column should be included in SQL `INSERT` statements. Default is `true`.              |
| `updatable`        | `boolean` | Whether the column should be included in SQL `UPDATE` statements. Default is `true`.              |
| `length`           | `int`     | Sets the column length for `String`-based columns (e.g., `VARCHAR(255)`). Default is `255`.       |
| `precision`        | `int`     | For decimal values: total number of digits. Default is `0`.                                       |
| `scale`            | `int`     | For decimal values: number of digits to the right of the decimal point. Default is `0`.           |
| `columnDefinition` | `String`  | Allows you to specify the exact SQL used for the column definition.                               |
| `table`            | `String`  | Specifies the name of the table that contains the column if it's different from the entity table. |
--------------------------------------------------------------------------------------------------------------------------------------




1) Learn how to create the common apis
2) Learn to use ResponseEntity
3) Normalize the use of CrossOrigin
4) Learn One to Many and Many to One Relationship
5) Learn Pagination

#### [ 1 ],[ 2 ],[ 3 ]
	package com.example.EmployeeManagementSystem.controller;

	import com.example.EmployeeManagementSystem.dto.DtoEmployee;
	import com.example.EmployeeManagementSystem.model.Employee;
	import com.example.EmployeeManagementSystem.service.ServiceEmployee;
	import com.example.EmployeeManagementSystem.service.ServiceEmployeeIn;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.HttpStatus;
	import org.springframework.http.ResponseEntity;
	import org.springframework.web.bind.annotation.*;
	import org.springframework.web.bind.annotation.CrossOrigin;
	import java.util.List;
	@RestController
	@CrossOrigin("*")
	@RequestMapping("api/employee")
	public class ControllerEmployee {
	    @Autowired
	    private ServiceEmployeeIn serviceEmployee;
	    private DtoEmployee updatedemployee;
	    @PostMapping
	     public ResponseEntity<DtoEmployee> createEmployee(@RequestBody DtoEmployee dtaEmployee){
	        DtoEmployee e=serviceEmployee.createEmployee(dtaEmployee);
	        return new ResponseEntity<>(e, HttpStatus.CREATED);
	    }
	    @GetMapping("/{id}")
	        public ResponseEntity<DtoEmployee> findById(@PathVariable("id") int id){
	        DtoEmployee e=serviceEmployee.findById(id);
	        return new ResponseEntity<>(e,HttpStatus.OK);
	    }
	    @GetMapping
	    public ResponseEntity<List<DtoEmployee>> findAllEmployee(){
	        List<DtoEmployee> employes =serviceEmployee.findAllEmployee();
	        return new ResponseEntity<>(employes,HttpStatus.OK);
	    }
	    @PutMapping("/{id}")
	    public ResponseEntity<DtoEmployee> updateEmployee(@PathVariable("id") int id,@RequestBody DtoEmployee updatedemployee){
	        DtoEmployee updatedemp = serviceEmployee.updateEmployee(id,updatedemployee);
	        return new ResponseEntity<>(updatedemp,HttpStatus.OK);
	    }
	    @DeleteMapping("/{id}")
	    public ResponseEntity<String> deleteEmployee(@PathVariable("id") int id){
	        serviceEmployee.deleteEmployee(id);
	        return ResponseEntity.ok("This Employee is Deleted successfully");
	    }
	}
####
#### [ 4 ]

	@Entity
	public class User 
	{
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private int u_id;

		private String uname;
		private String uemail;
		private String upassword;
		private Long unumber;
	@OneToMany(mappedBy = "user",cascade = CascadeType.ALL)
		private List<Orders> orders; 	
	}


	@Entity
	public class Orders
	{
		@Id
		@GeneratedValue(strategy = GenerationType.AUTO)
		private int oId;
		private String oName;
		private double oPrice;
		private int oQuantity;
		private Date orderDate;
		private double totalAmmout;
		
		@ManyToOne
		@JoinColumn(name="user_u_id")
		private User user;
		
		public boolean validateAdminCredentials(String email,String password)
		{
			Admin admin=adminRepository.findByAdminEmail(email);
			if(admin!=null && admin.getAdminPassword().equals(password))
			{
				return true;
			}
			return false;
		}
	}
####
#### [ 5 ]

	@GetMapping("/tasks")
	    public Page<Todo> getPaginatedTasks(
	            @RequestParam(defaultValue = "0") int page,
	            @RequestParam(defaultValue = "5") int size
	    ) {
	        return service.getPaginatedTasks(page, size);
	    }

	@Service
	public class TodoService {

	    @Autowired
	    private TodoRepository repo;
	    
	    // Fetching All the Tasks from the Database.

	    public Page<Todo> getPaginatedTasks(int page, int size) {
	        Pageable pageable = PageRequest.of(page, size, Sort.by("id").descending());
	        return repo.findAll(pageable);
	    }
	}
####

