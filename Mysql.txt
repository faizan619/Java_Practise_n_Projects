CREATE TABLE Departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50)
);

INSERT INTO Departments (dept_id, dept_name) VALUES
	(1, 'Engineering'),
	(2, 'Marketing'),
	(3, 'Sales'),
	(4, 'HR');

CREATE TABLE Employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50),
    dept_id INT,
    manager_id INT,
    FOREIGN KEY (dept_id) REFERENCES Departments(dept_id)
);

INSERT INTO Employees (emp_id, emp_name, dept_id, manager_id) VALUES
	(101, 'Alice', 1, NULL),
	(102, 'Bob', 1, 101),
	(103, 'Charlie', 2, 101),
	(104, 'David', 2, 103),
	(105, 'Eve', 3, 101),
	(106, 'Frank', NULL, NULL); -- no department

CREATE TABLE Projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(100),
    emp_id INT,
    FOREIGN KEY (emp_id) REFERENCES Employees(emp_id)
);

INSERT INTO Projects (project_id, project_name, emp_id) VALUES
	(201, 'Project A', 102),
	(202, 'Project B', 103),
	(203, 'Project C', 105),
	(204, 'Project D', NULL), -- no employee assigned
	(205, 'Project E', 104); -- invalid emp_id (foreign key may fail)

Inner Joins
-- Q1: List employee names and their department names.						
	SELECT Employees.emp_name, Departments.dept_name from Employees
	INNER JOIN Departments WHERE Employees.dept_id = Departments.dept_id		

-- Q2: Show project names and the employee names working on them.										
	SELECT Projects.project_name, Employees.emp_name FROM Projects
	INNER JOIN Employees WHERE Projects.emp_id = Employees.emp_id limit 30

-- Q3: List departments and the number of employees in each.
	SELECT Departments.dept_name as Deptartment_name, COUNT(Employees.dept_id) AS total_employee FROM Departments
	INNER JOIN Employees WHERE Departments.dept_id = Employees.dept_id GROUP BY Employees.dept_id

-- Q4: List all employees who have been assigned to projects.
	SELECT Employees.emp_name, Projects.project_name from Employees
	INNER JOIN Projects WHERE Employees.emp_id = Projects.emp_id
-- Q5: Show each employee’s name and their manager’s name.
-- Q6: List employees with their departments and assigned project names.
-- Q7: Show departments with at least one employee assigned.
-- Q8: List employees who belong to departments and also have projects.
-- Q9: Find employees whose project and department both exist.
-- Q10: Show each employee with both department name and project name.

Left Join
-- Q1: List all employees and their department names (including those with no dept).
-- Q2: Show all employees and their project names (including unassigned).
-- Q3: List all departments and their employees (even if no employees).
-- Q4: Show all projects and employee names (even if no employee is assigned).
-- Q5: Get all employees and their manager names (even if no manager).
-- Q6: List departments and total number of employees (even if 0).
-- Q7: Show all employees and project names (null if no project).
-- Q8: Get all employees and assigned projects; show null if no match.
-- Q9: Show projects and employee departments (null if not assigned).
-- Q10: Get employee names and manager names, including those without a manager.

Right Join
-- Q1: List all departments and employees (even if no employee in that dept).
-- Q2: Show all projects and employee names (even if project has no assigned emp).
-- Q3: Get all projects with employee department names (include unassigned).
-- Q4: List employees and their departments using RIGHT JOIN.
-- Q5: Show employees and their projects (include projects with no employees).
-- Q6: List all departments and whether they have employees.
-- Q7: Show employees with department names, right join way.
-- Q8: Get all projects and assigned employees, include projects with null emp_id.
-- Q9: List departments and their employees sorted by dept_id.
-- Q10: Show all projects with employee and department info.

Self Join
-- Q1: List all employees and their managers (using manager_id).
-- Q2: Show names of employees and their manager names.
-- Q3: Get employees who are managers.
-- Q4: List employee-manager pairs.
-- Q5: Show employees who have the same manager.
-- Q6: Find employees who report to the same manager as 'Bob'.
-- Q7: Count how many people report to each manager.
-- Q8: Get employees whose managers are in a different department.
-- Q9: List all employees with NULL manager.
-- Q10: Show hierarchy: employee -> manager -> manager’s manager.

Interview on Joins
1. What is the difference between INNER JOIN and LEFT JOIN?
2. When would you prefer RIGHT JOIN over LEFT JOIN?
3. Explain SELF JOIN and give a real-life example.
4. What happens when there is no matching row in a JOIN?
5. How can you join a table with itself?
6. What’s the difference between JOIN and UNION?
7. Can INNER JOIN return NULLs?
8. How do you identify unmatched rows using LEFT JOIN?
9. What is a Cartesian product in JOIN?
10. What are different types of JOINs in SQL and their use cases?



Commands

{# How to Create Foreign Key #}
	CREATE TABLE Books (
	 BookID INT PRIMARY KEY,
	 Title VARCHAR(100),
	 AuthorID INT,
	 FOREIGN KEY (AuthorID) REFERENCES Authors(AuthorID) ON DELETE SET NULL
	 						or
	 FOREIGN KEY (AuthorID) REFERENCES Authors(AuthorID) ON DELETE CASCADE
	);

{# How to Use Left Join, Right Join, Inner Join, Full Join, Cross Join #}
	SELECT Students.Name, Classes.ClassName
	FROM Students
	INNER JOIN Classes ON Students.ClassID = Classes.ClassID;
							or
	LEFT JOIN Classes ON Students.ClassID = Classes.ClassID;
							or
	RIGHT JOIN Classes ON Students.ClassID = Classes.ClassID;
							or
	FULL JOIN Classes ON Students.ClassID = Classes.ClassID;
							or
	CROSS JOIN Classes;



	SELECT Student.StudName, Courses.CourseName, Teacher.TechName
	from Student
	INNER Join Courses on Student.courseId = Courses.id
	INNER JOIN Teacher on Courses.techId = Teacher.id;

CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50),
    department VARCHAR(50),
    salary INT,
    hire_date DATE
);

INSERT INTO employees VALUES
(101, 'Alice',    'HR',        50000, '2020-01-15'),
(102, 'Bob',      'Finance',   60000, '2019-03-10'),
(103, 'Charlie',  'IT',        75000, '2021-06-21'),
(104, 'David',    'Finance',   60000, '2022-08-14'),
(105, 'Eva',      'IT',        90000, '2018-11-30'),
(106, 'Frank',    'HR',        50000, '2017-09-25'),
(107, 'Grace',    'IT',        85000, '2020-04-05'),
(108, 'Heidi',    'Marketing', 40000, '2019-07-12'),
(109, 'Ivan',     'IT',        75000, '2023-01-02'),
(110, 'Judy',     'Marketing', 40000, '2016-10-18'),
(111, 'Kevin',    'Finance',   68000, '2017-12-11'),
(112, 'Laura',    'HR',        55000, '2022-01-20'),
(113, 'Mallory',  'IT',        75000, '2023-03-22'),
(114, 'Niaj',     'Finance',   71000, '2018-04-19'),
(115, 'Oscar',    'HR',        50000, '2019-11-01'),
(116, 'Peggy',    'IT',        88000, '2020-06-10'),
(117, 'Quentin',  'IT',        90000, '2021-09-14'),
(118, 'Rita',     'Marketing', 42000, '2022-07-07'),
(119, 'Sybil',    'Finance',   71000, '2017-02-08'),
(120, 'Trent',    'HR',        55000, '2016-03-03');


CREATE TABLE departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50),
    location VARCHAR(50)
);

INSERT INTO departments VALUES
(1, 'HR',        'New York'),
(2, 'Finance',   'Chicago'),
(3, 'IT',        'San Francisco'),
(4, 'Marketing', 'Los Angeles'),
(5, 'Sales',     'Seattle'); -- No employee in Sales


CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(50),
    emp_id INT,  -- Foreign key to employees
    status VARCHAR(20)
);


INSERT INTO projects VALUES
(201, 'Alpha',   101, 'Ongoing'),
(202, 'Beta',    103, 'Completed'),
(203, 'Gamma',   105, 'Ongoing'),
(204, 'Delta',   107, 'Ongoing'),
(205, 'Sigma',   102, 'Completed'),
(206, 'Epsilon', 109, 'Ongoing'),
(207, 'Omega',   110, 'Ongoing'),
(208, 'Zeta',    120, 'Completed'),
(209, 'Theta',   108, 'Ongoing'),
(210, 'Kappa',   115, 'On Hold');


{# Find the Nth Highest Salary of Employee #}

	{# First Highest Salary #}
	SELECT emp_id,emp_name,max(salary) from interview_emp;

	{# Second Highest Salary #}
	SELECT emp_id,emp_name,max(salary) from interview_emp WHERE salary < (SELECT max(salary) from interview_emp);

	{# Find 10th Highest Salary #}
	SELECT DISTINCT(salary) from interview_emp ORDER BY salary desc limit 9,1;

	{# There is two same salary in 5 ,6 and 7 so the 8th salary is 6th highest salary find that #}
	SELECT DISTINCT(salary) from interview_emp ORDER BY salary limit 5,1

	{# Find 6th highest salary without limit #}
	SELECT salary from interview_emp e1 where 5 = (SELECT COUNT(DISTINCT(salary)) from interview_emp e2 where e2.salary > e1.salary);

{# Join Query #}

	{# Find the Name of department where more than 5 employee are working #}
	SELECT departments.dept_name, COUNT(employees.department) from departments
	INNER JOIN employees ON employees.department = departments.dept_name GROUP BY departments.dept_name HAVING COUNT(employees.department) > 5;

	{# Calculate the average salary of each department which is higher than 75000. find department name also in decending order #}


	{# Find those Employee whose salary exists between 35000 to 90000 with Department and Manager Name #}

	{# Retrieve employee names along with their department names. #}


	{# List all departments even if they have no employees #}


	{# Find employees who are not assigned to any department. #}


	{# Find the total salary paid by each department #}


	{# List employees who work in the same department as 'Alice'. #}


	{# Find employees and their project names (many-to-many using a junction table) #}


	{# List employees who don't have any assigned projects. #}


	{# Find the department with the highest number of employees. #}


	{# List departments with average salary above overall company average #}


	{# Find employees who share the same job title but work in different departments. #}


	{# Find projects that have more than 3 employees working on them. #}

	
	{# List employees along with their department and project details. #}

